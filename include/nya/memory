#ifndef _LIBNYA_MEMORY
#define _LIBNYA_MEMORY

#include <cstddef>
#include <new>

namespace nya {

constexpr std::size_t align_up(std::size_t size, std::size_t alignment) { return (size + alignment - 1) & ~(alignment - 1); }

template <typename T>
class observer_ptr {
public:
    using element_type = T;
    using pointer = T *;
    using reference = T &;

    observer_ptr() : ptr(nullptr) {}
    observer_ptr(pointer ptr) : ptr(ptr) {}
    observer_ptr(const observer_ptr &) = default;
    observer_ptr(observer_ptr &&) = default;
    observer_ptr & operator=(const observer_ptr &) = default;
    observer_ptr & operator=(observer_ptr &&) = default;
    ~observer_ptr() = default;

    pointer get() const { return ptr; }
    pointer operator->() const { return ptr; }
    reference operator*() const { return *ptr; }
    bool operator==(const observer_ptr & other) const { return ptr == other.ptr; }
    bool operator!=(const observer_ptr & other) const { return ptr != other.ptr; }

private:
    pointer ptr;
};

template <typename T>
class observer_ptr<const T> {
public:
    using element_type = T;
    using pointer = const T *;
    using reference = const T &;

    observer_ptr() : ptr(nullptr) {}
    observer_ptr(pointer ptr) : ptr(ptr) {}
    observer_ptr(const observer_ptr &) = default;
    observer_ptr(observer_ptr &&) = default;
    observer_ptr & operator=(const observer_ptr &) = default;
    observer_ptr & operator=(observer_ptr &&) = default;
    ~observer_ptr() = default;

    observer_ptr(const observer_ptr<T> & other) : ptr(other.get()) {}
    observer_ptr & operator=(const observer_ptr<T> & other) {
        ptr = other.get();
        return *this;
    }

    pointer get() const { return ptr; }
    pointer operator->() const { return ptr; }
    reference operator*() const { return *ptr; }
    bool operator==(const observer_ptr & other) const { return ptr == other.ptr; }
    bool operator!=(const observer_ptr & other) const { return ptr != other.ptr; }

private:
    pointer ptr;
};

template <typename T>
class observer_ptr<T[]> {
public:
    using element_type = T;
    using pointer = T *;
    using reference = T &;

    observer_ptr() : ptr(nullptr) {}
    observer_ptr(pointer ptr) : ptr(ptr) {}
    observer_ptr(const observer_ptr &) = default;
    observer_ptr(observer_ptr &&) = default;
    observer_ptr & operator=(const observer_ptr &) = default;
    observer_ptr & operator=(observer_ptr &&) = default;
    ~observer_ptr() = default;

    pointer get() const { return ptr; }
    pointer operator->() const { return ptr; }
    reference operator*() const { return *ptr; }
    bool operator==(const observer_ptr & other) const { return ptr == other.ptr; }
    bool operator!=(const observer_ptr & other) const { return ptr != other.ptr; }

    reference operator[](size_t index) const { return ptr[index]; }

private:
    pointer ptr;
};

template <typename T>
class observer_ptr<const T[]> {
public:
    using element_type = T;
    using pointer = const T *;
    using reference = const T &;

    observer_ptr() : ptr(nullptr) {}
    observer_ptr(pointer ptr) : ptr(ptr) {}
    observer_ptr(const observer_ptr &) = default;
    observer_ptr(observer_ptr &&) = default;
    observer_ptr & operator=(const observer_ptr &) = default;
    observer_ptr & operator=(observer_ptr &&) = default;
    ~observer_ptr() = default;

    observer_ptr(const observer_ptr<T[]> & other) : ptr(other.get()) {}
    observer_ptr & operator=(const observer_ptr<T[]> & other) {
        ptr = other.get();
        return *this;
    }

    pointer get() const { return ptr; }
    void reset(pointer ptr = nullptr) { this->ptr = ptr; }
    pointer operator->() const { return ptr; }
    reference operator*() const { return *ptr; }
    bool operator==(const observer_ptr & other) const { return ptr == other.ptr; }
    bool operator!=(const observer_ptr & other) const { return ptr != other.ptr; }

    reference operator[](size_t index) const { return ptr[index]; }

private:
    pointer ptr;
};

/**
 * @brief Failure-aware memory allocator.
 *
 */
class famr {
public:
    famr() = default;
    famr(std::size_t size) : begin_(static_cast<std::byte *>(::operator new(size, std::align_val_t(256)))), end_(begin_ + size), current_(begin_) {}
    famr(const famr &) = delete;
    famr & operator=(const famr &) = delete;
    famr(famr && other) : begin_(other.begin_), end_(other.end_), current_(other.current_) {
        other.begin_ = nullptr;
        other.end_ = nullptr;
        other.current_ = nullptr;
    }
    famr & operator=(famr && other) {
        begin_ = other.begin_;
        end_ = other.end_;
        current_ = other.current_;
        other.begin_ = nullptr;
        other.end_ = nullptr;
        other.current_ = nullptr;
        return *this;
    }
    ~famr() { ::operator delete(begin_, std::align_val_t(256)); }

    void * allocate(std::size_t size, std::size_t alignment) {
        current_ = reinterpret_cast<std::byte *>(nya::align_up(reinterpret_cast<std::size_t>(current_), alignment));
        if (current_ + size > end_) return nullptr;
        void * result = current_;
        current_ += size;
        return result;
    }

private:
    std::byte *begin_, *end_, *current_;
};

} // namespace nya

#endif // _LIBNYA_MEMORY
