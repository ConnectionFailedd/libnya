#ifndef _LIBNYA_TYPE_TRAITS
#define _LIBNYA_TYPE_TRAITS

#include <concepts>
#include <cstddef>
#include <tuple>
#include <type_traits>
#include <utility>

namespace nya {

template <typename Type, template <typename...> typename Template>
struct is_specialization_of : std::false_type {};

template <template <typename...> typename Template, typename... Args>
struct is_specialization_of<Template<Args...>, Template> : std::true_type {};

template <template <typename...> typename T, typename... Args>
struct is_instantiable_with : std::integral_constant<bool, requires { typename T<Args...>; }> {};

template <template <typename...> typename T, std::size_t N, typename Tuple>
struct __is_template_prefix_equivalent_impl {
private:
    template <std::size_t... I, std::size_t... J>
    static std::true_type test_(std::index_sequence<I...>, std::index_sequence<J...>)
    requires is_instantiable_with<T, std::tuple_element_t<I, Tuple>...>::value
             && std::same_as<T<std::tuple_element_t<I, Tuple>...>, T<std::tuple_element_t<J, Tuple>...>>;
    static std::false_type test_(...);

public:
    static constexpr bool value = decltype(test_(std::make_index_sequence<N>{}, std::make_index_sequence<std::tuple_size_v<Tuple>>{}))::value;
};

template <template <typename...> typename T, std::size_t N, typename... Args>
using is_template_prefix_equivalent = __is_template_prefix_equivalent_impl<T, N, std::tuple<Args...>>;

template <template <typename...> typename T, std::size_t N, typename... Args>
struct __required_template_args_impl {
private:
    static constexpr std::size_t test_() {
        if constexpr (N == sizeof...(Args)) { return N; }
        else if constexpr (is_template_prefix_equivalent<T, N, Args...>::value) { return N; }
        else { return __required_template_args_impl<T, N + 1, Args...>::value; }
    }

public:
    static constexpr std::size_t value = test_();
};

template <template <typename...> typename T, typename... Args>
using required_template_args = __required_template_args_impl<T, 0UL, Args...>;

template <typename T>
struct function_signature;

template <typename R, typename... Args>
struct function_signature<R(Args...)> {
    using type = R(Args...);
};

template <typename R, typename... Args>
struct function_signature<R (*)(Args...)> {
    using type = R(Args...);
};

template <typename T>
struct __member_function_signature;

template <typename R, typename C, typename... Args>
struct __member_function_signature<R (C::*)(Args...) const> {
    using type = R(Args...);
};

template <typename R, typename C, typename... Args>
struct __member_function_signature<R (C::*)(Args...)> {
    using type = R(Args...);
};

template <typename T>
struct function_signature : __member_function_signature<decltype(&T::operator())> {};

template <typename T>
using function_signature_t = typename function_signature<T>::type;

} // namespace nya

#endif // _LIBNYA_TYPE_TRAITS
