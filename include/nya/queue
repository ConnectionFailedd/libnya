#ifndef _LIBNYA_QUEUE
#define _LIBNYA_QUEUE

#include <atomic>
#include <optional>
#include <stdexcept>

namespace nya {

struct single_producer_tag {};
struct multiple_producers_tag {};
struct single_consumer_tag {};
struct multiple_consumers_tag {};

template <typename T, typename ProducerTag = multiple_producers_tag, typename ConsumerTag = multiple_consumers_tag>
requires (std::is_same_v<ProducerTag, single_producer_tag> || std::is_same_v<ProducerTag, multiple_producers_tag> ||
          std::is_same_v<ConsumerTag, single_consumer_tag> || std::is_same_v<ConsumerTag, multiple_consumers_tag>)
class lock_free_queue {
private:
    struct node {
        std::optional<T> data;
        std::atomic<node *> next;

        node() : data(std::nullopt), next(nullptr) {}
        explicit node(T && value) : data(std::move(value)), next(nullptr) {}
    };

    std::atomic<node *> head_;
    std::atomic<node *> tail_;

    // 添加关闭状态标志
    std::atomic<bool> closed_;

public:
    lock_free_queue() : closed_(false) {
        // 使用一个 dummy 节点简化边界条件
        auto dummy = new node();
        head_.store(dummy);
        tail_.store(dummy);
    }

    ~lock_free_queue() {
        // 清理所有剩余的节点
        while (auto old_head = head_.load()) {
            head_.store(old_head->next.load());
            delete old_head;
        }
    }

    /**
     * @brief 入队，如果队列已关闭，则抛出异常
     * @if ProducerTag == multiple_producers_tag
     *
     * @param value 入队值
     */
    void enqueue(T value)
    requires (std::is_same_v<ProducerTag, multiple_producers_tag>)
    {
        // 检查队列是否已关闭
        if (closed_.load(std::memory_order_acquire)) { throw std::runtime_error("Queue is closed for writing"); }

        auto new_node = new node(std::move(value));
        while (true) {
            auto old_tail = tail_.load();

            // 尝试插入新节点
            node * expected_null = nullptr;
            if (old_tail->next.compare_exchange_weak(expected_null, new_node)) {
                tail_.compare_exchange_weak(old_tail, new_node);
                break;
            }
            // 插入失败，说明 old_tail 落后
            // tail 也可能落后，尝试推进
            tail_.compare_exchange_weak(old_tail, old_tail->next.load());
        }
    }

    void enqueue(T value)
    requires (std::is_same_v<ProducerTag, single_producer_tag>)
    {
        // 检查队列是否已关闭
        if (closed_.load(std::memory_order_acquire)) { throw std::runtime_error("Queue is closed for writing"); }

        auto new_node = new node(std::move(value));
        auto old_tail = tail_.load();
        old_tail->next.store(new_node);
        tail_.store(new_node);
    }

    /**
     * @brief 出队
     *
     * @return std::optional<T> 出队成功返回值，否则返回 std::nullopt
     */
    std::optional<T> dequeue()
    requires (std::is_same_v<ConsumerTag, multiple_consumers_tag>)
    {
        while (true) {
            auto old_head = head_.load();
            auto old_tail = tail_.load();
            auto next = old_head->next.load();

            if (old_head == old_tail) {
                // 队列为空
                if (next == nullptr) return std::nullopt;
                // 尾节点落后，尝试推进
                tail_.compare_exchange_weak(old_tail, next);
            }
            else {
                // 队列不为空，尝试出队
                if (head_.compare_exchange_weak(old_head, next)) {
                    auto result = std::move(next->data);
                    delete old_head; // 删除旧的头节点
                    return result;
                }
            }
        }
    }

    void dequeue()
    requires (std::is_same_v<ConsumerTag, single_consumer_tag>)
    {
        auto head = head_.load();
        auto next = head->next.load();

        // 检查队列是否为空
        if (next == nullptr) [[unlikely]]
            throw std::runtime_error("Queue is empty");

        // 队列不为空，则将队首元素出队
        head_.store(next);
        delete head;
    }

    /**
     * @brief 允许唯一的消费者获取队首元素
     *
     * @return T& 队首元素的引用
     * @throw std::runtime_error 队列为空时抛出异常
     */
    T & front()
    requires (std::is_same_v<ConsumerTag, single_consumer_tag>)
    {
        // 数据存储在队首节点的下一个节点
        auto next = head_.load()->next.load();
        // 检查队列是否为空
        if (next == nullptr) [[unlikely]]
            throw std::runtime_error("Queue is empty");
        return next->data.value();
    }

    /**
     * @brief 允许唯一的消费者获取队首元素
     *
     * @return const T& 队首元素的常量引用
     * @throw std::runtime_error 队列为空时抛出异常
     */
    const T & front() const
    requires (std::is_same_v<ConsumerTag, single_consumer_tag>)
    {
        // 数据存储在队首节点的下一个节点
        auto next = head_.load()->next.load();
        // 检查队列是否为空
        if (next == nullptr) [[unlikely]]
            throw std::runtime_error("Queue is empty");
        return next->data.value();
    }

    bool empty() const { return head_.load()->next.load() == nullptr; }

    // /**
    //  * @brief 允许唯一的生产者获取队尾元素
    //  *
    //  * @return T& 队尾元素的引用
    //  * @throw std::runtime_error 队列为空时抛出异常
    //  */
    // T & back()
    // requires (std::is_same_v<ProducerTag, single_producer_tag>)
    // {
    //     auto tail = tail_.load();
    //     auto head = head_.load();
    //     // 检查队列是否为空
    //     if (head == tail) [[unlikely]]
    //         throw std::runtime_error("Queue is empty");
    //     return tail->data.value();
    // }

    // /**
    //  * @brief 允许唯一的生产者获取队尾元素
    //  *
    //  * @return const T& 队尾元素的常量引用
    //  * @throw std::runtime_error 队列为空时抛出异常
    //  */
    // const T & back() const
    // requires (std::is_same_v<ProducerTag, single_producer_tag>)
    // {
    //     auto tail = tail_.load();
    //     auto head = head_.load();
    //     // 检查队列是否为空
    //     if (head == tail) [[unlikely]]
    //         throw std::runtime_error("Queue is empty");
    //     return tail->data.value();
    // }

    /**
     * @brief 关闭队列，表示不会再有新数据写入
     *
     */
    void close() { closed_.store(true, std::memory_order_release); }

    /**
     * @brief 检查队列是否已关闭
     *
     * @return true 已关闭
     * @return false 未关闭
     */
    bool is_closed() const { return closed_.load(std::memory_order_acquire); }

    /**
     * @brief 检查队列是否已关闭且为空
     *
     * @return true 已关闭且为空
     * @return false 未关闭或不为空
     */
    bool is_finished() const {
        if (!closed_.load(std::memory_order_acquire)) { return false; }

        // 队列已关闭，检查是否为空
        auto old_head = head_.load();
        auto old_tail = tail_.load();
        auto next = old_head->next.load();

        return (old_head == old_tail && next == nullptr);
    }
};

} // namespace nya

#endif
